Modules - 
- Are containers that allow components, directives, factories, routes, filters that you build for you app have a way to be organised into one container
- Defining a module = var demoApp = angular.module('demoApp', []);
- The array used as a second argument is for dependencies, you module might reference other modules for an example. Eg:- var demoApp = angular.module('demoApp', [helperModule]);
- This is injecting another module into your module and gives us access to that modules features and functionality.

Routes -
- Determines what routes/view gets loaded (path)

Views - 
- Within views, we can have directives, which enhance HTML
- We can have something called filters (they proved some data filtering functionality and can do simple things like uppercase data, lowercase data and more)

Logic/data
- Controller (brain for our views and get data or perform business rules against factories or services) - data is shared from the controller to the view via something called $scope
- Factories
- Services

What are factories/services?
- used to make restful calls
- Used to share data between controllers
- Used to ahndle custom Logic
- The are singletons

What is a controller?
- Controllers act as the "brain" for a view : Retrieve data from a factory/service and store it.
- They typically interact with a service/factory
- The by using the scope they can then bind that data into the view using directives defined in the view

What can directives do?
- DOM manipulation
- Data binding
- Reference modules and controllers
- Handle events
- Modify css
- Control where views will be loaded in the shell page
- ETC

DOM
- ng-hide, ng-show
- ng-repeat, ng-switch (ng-switch on="data.loggedIn", ng-switch-when="true", ng-switch-default)
- ng-view (where a given view loads in the shell page)
- ng-cloak (sets the container to display none - or just load scripts at the bottom of the page)

Modules/Comntrollers
- ng-app
- ng-controller (associating a controller with a view)

Data binding
- ng-bind (can be used like this - ng-bind="name" instead of {{ name }} if you so choose.)
- ng-init (initialize your properties with inital values)
- ng-model

events
- ng-click
- ng-keypress
- ng-mouseenter

Defining directives in different ways- 
- <div ng-hide="isHidden">
- <div data-ng-hide="isHidden">
- <ng-view></ng-view>

Filters -
- AngularJS can "pipe" data through filtering, formatting and sorting functions
- Uses the character |

List of key filters -
- currency
- date (can be used to format dates into a format of your liking)
- filter (filter: whatToFilter)
- json (output data as raw json, usefull in debugging scenarios)
- limitTo (can limit things, for example limit an array to only show 4 items even if it has more)
- lowercase, uppercase
- number
- orderBy (allows us to order our data based on a property : eg - cust in cusomters | orderBy: 'name')

AngularJS Controllers
- Define properties and emthods
- Handles showing/Hiding controls and  data in the view
- Handles events triggered by a view
- Knows how to retrieve data
- Interacts with the view using the $scope object

The role of $scope
- $scope is a keyword that AngularJS understands out the box
- $scope is "injected" into a controller
- Acts as athe ViewModel
- Views bind to scope properties and functions

Using "Controller AS"
- When using controll as, you need to reference it in the ng-controller in the template = "CustomerController as ctrl"
- The controller then would need to use "this" instead of $scope
- You can then access the items like this - cust in ctrl.customers inside of the template

Factories and Services
- Includes serveral built-in factories/services
- They are singletons that perfom re-useable tasks: (Ajax calls, Business rules, Calculations, Share data between controllers)
- You can create your own factories/services with modules

AngularJS built in services (a few of them)
- $http - HTTP calls
- $timout - Can be used in a similar was as window.timeOut()
- $window - Gives you access to the window object
- $location - Will get you access to the URL (#, HOST) etc
- $q - Used with Asynchronous processes like ajax calls and others
- $rootScope - Used behind the scences to actually make new scopes
- $ interval - a reapeating interval you could use
- $filter
- $log

What is a factory?
- Define reusable tasks
- Share code or state between controllers
- Create and return a custom object
- Created using the module.factory() function
- Can be injected into other components
- Can have dependencies
- Adding a factory to a module - (angular.module('customersApp').factory("customersFactory", customersFactory))
- Injecting a factory into a controller - (var CustomersController = function($scope, customersFactory)) -  as long as it is registered with our module the controller exists in.

What is a service?
- Very similar to a factory
- Service function represents the returned object as opposed to a custom object like in a factory
- Created using the module.service() function
- Can be injected into other components
- Can have dependencies

Value and Constant
- A value can be created using module.value(key, value); - angular.module("customersApp").value("version", "1.0")
- Allows you to provide a centeralized area to put strings and other types of objects
- Can't be injected into the config() function that wraps our routes
- angular.module('customersApp').value('appSettings', { title: 'Customers Application', version: '1.0'});
- A constant can be created using module.constant(key, value); - angular.module("customersApp").constant("version", "1.0")
- It's the same as a value, but this can be injected into the config() method in order to get it earlier in the life cycle
- Angular.module('customersApp').constant('appSettings', { title: 'Customers Application', version: '1.0'});

What are directives?
- Directives teach HTML new tricks
- Markers on a DOM element that tells AngularJS's html compler ($compile) to attach specified behaviour to that DOM element. (<div my-directive></div>)
- They can manipulate the DOM, Modify CSS, Iterate through data, validate data, handle events and assist with data binding
- You define a directive like this - angular.module('moduleName').directive('simpleDirective', function(){}); = (<div simple-directive></div>)

Directive categories - 
- Dom-driven Directives - All about DOM manipulation
- Behaviour-driven Directives - All about handling DOM events
- Data-Driven Directives - All about data, using other directives and a controller

3rd party AngularJS directives
- UI Bootstrap
- AngularStrap
- Angular UI Grid

Directive Definition Object (DDO)
- $complie provider relies on a directive definition object (DDO)
- Defines the template for the directive
- Can define a controller for the directive
- Controls the directives scope
- Defines how the directive can be used

Key DDO properties
- restrict, template, templateUrl, scope, controller, link
- eg:- 

angular.module('moduleName').directive('myDirective', function() {
    return {
        restrict: 'EA', (Element or Attribute)
        scope: {}, (Isloated Scope)
        template: '<div>{{ myVal }}</div>',
        controller: controller,
        link: function(scope, element, attrs) {} (links our directive into the dom and we can get access to the scope, the element where the directive is and the attributes that are on that element)
    }
})

Understand Shared and Isloated scope
- Shared scope is shared from parent to child or from controller to directive
- Isloated scope is isolated from it's parent and only lives in the directive (inside of the DDO scope property) and cannot be accessed like this (<div isolated-scope></div>)
- scope: {} is what sets up the isolated scope inside of the DDO

How to punch a hole in the isolated scopes wall
- There are 3 symbols (@ = &) and using these values allows us to get through the wall (like a pipeline through the wall)
- (@) - represents a string value that is allowed to be passed to a isolated scope eg:-

$scope.first='Dave'
<my-directive name="{{first}}" />
scope: {name: '@'}

- You can also set what the name of the data needs to be like this - '@fullname' == fullname '@fullName' == full-name on the outside if you want.
- (=) - Two way type of binding we can do, we can punch a hole through the isolate scope with = aswell
- So if the value passed to the directive changes, the change will happen outside and inside of the directive.
- You can pass strings or objects eg:-

$scope.person = { name: 'DAVE' };
<my-directive customer="person" /> (no need for {{}} as this accepts objects)
scope: { customer: '=' }

- (&) - Allows us to pass in a function/expression that we could then store in our isolated scope, then we can invoke that function if something happens
- The function itself gets passed in, the action is an alias for the function eg:-

$scope.click = function() {};
<my-directive action="click()" />
scope: {action: '&'}

The link function - 
- The link function is all about DOM manipulation
- This function links the template for the directive to the scope (links the data to the view)
- It looks like this - inside of the DDO - link: function(scope, element, attrs) {}
- Scope - the scope can either be shared or isolated, depending on how you set up your directive.
- Element - is the element the that the directive is current on, or is could be the element
- Attr - all the attributes on the element

jqLite
- It's a tine API compatible subset of jQuery that allows Angular to manipulate the DOM.
- If you install JQuery yourself, it will use the full version of JQuery instead, but it's generally not needed.
- angular.element() - to get to the actually element we want to work with
- addClass(), css(), attr(), on(), off(), find(), append(), remove(), html(), text(), ready() (you don't ahve to use these)

scope.$watchCollection()
- Allows us to watch a collection if there are any changes
- If there is a change to the collection this can then call a callback function
- The way you see that it has changed would be to use "=" to create a two way bind in isolated scope.

How to use the $eval property and $parse
- It is $eval accessed via the scope
- Eg:- scope.$eval(attrs.columnmap) - under the covers $eval calls $parse for you
- $parse needs to be injected into the function
- Eg:- var tableHlperWithParse = ['$parse', function($parse) {}]
- Parse returns a function, so when you use $parse you then need to invoke it to return the value to a variable
- Eg:- var test = $parse(attrs.columnmap)();
- These two convert strings to objects

Using $compile method
- The compile function is closely related to the link function and for the most part it's mostly hidden away from us
- The compile functions responsibility is to really access the raw template and store it once.
- So now if the directive is used 50 times. Instead of creating new objects over and over it will share it's instance with all of them.
- Once compile gets the template, right before the link function is called, there is something that gets called, called the pre-link (not really needed)
- The last thing that gets called is the post-link (which is actually the link function)
- So in short directives rely on the $compile service behind the scenes which provices the pre and post link functions

Using a controller in a directive
- In order to add a controller to a directive, what you need to do is add it to the DDO
- Eg:- { restrict: 'EA', scope: {}, controller: function($scope) {} }

What is transclusion?
- Inclusion of a document or part of a document into another document by reference. (like including a footer into the main document) like and ngViewn gTemplate in Angular
- Type of an include/wrapping of some functionality
- ng-transclude is basically an X marks the spot, as in where d you want the content to go.
- To use transclude you need to add it to the DDO - transclude: true (aka child content) and this gives us access to the transclue method inside of the link function
- Eg:-

<div class="containter" ng-transclude>
    Content provided by consumer of directive
</div>

or

<ng-transclude></ng-transclude>