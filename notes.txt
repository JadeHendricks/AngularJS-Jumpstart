Modules - 
- Are containers that allow components, directives, factories, routes, filters that you build for you app have a way to be organised into one container
- Defining a module = var demoApp = angular.module('demoApp', []);
- The array used as a second argument is for dependencies, you module might reference other modules for an example. Eg:- var demoApp = angular.module('demoApp', [helperModule]);
- This is injecting another module into your module and gives us access to that modules features and functionality.

Routes -
- Determines what routes/view gets loaded (path)

Views - 
- Within views, we can have directives, which enhance HTML
- We can have something called filters (they proved some data filtering functionality and can do simple things like uppercase data, lowercase data and more)

Logic/data
- Controller (brain for our views and get data or perform business rules against factories or services) - data is shared from the controller to the view via something called $scope
- Factories
- Services

What are factories/services?
- used to make restful calls
- Used to share data between controllers
- Used to ahndle custom Logic
- The are singletons

What is a controller?
- Controllers act as the "brain" for a view : Retrieve data from a factory/service and store it.
- They typically interact with a service/factory
- The by using the scope they can then bind that data into the view using directives defined in the view

What can directives do?
- DOM manipulation
- Data binding
- Reference modules and controllers
- Handle events
- Modify css
- Control where views will be loaded in the shell page
- ETC

DOM
- ng-hide, ng-show
- ng-repeat, ng-switch (ng-switch on="data.loggedIn", ng-switch-when="true", ng-switch-default)
- ng-view (where a given view loads in the shell page)
- ng-cloak (sets the container to display none - or just load scripts at the bottom of the page)

Modules/Comntrollers
- ng-app
- ng-controller (associating a controller with a view)

Data binding
- ng-bind (can be used like this - ng-bind="name" instead of {{ name }} if you so choose.)
- ng-init (initialize your properties with inital values)
- ng-model

events
- ng-click
- ng-keypress
- ng-mouseenter

Defining directives in different ways- 
- <div ng-hide="isHidden">
- <div data-ng-hide="isHidden">
- <ng-view></ng-view>

Filters -
- AngularJS can "pipe" data through filtering, formatting and sorting functions
- Uses the character |

List of key filters -
- currency
- date (can be used to format dates into a format of your liking)
- filter (filter: whatToFilter)
- json (output data as raw json, usefull in debugging scenarios)
- limitTo (can limit things, for example limit an array to only show 4 items even if it has more)
- lowercase, uppercase
- number
- orderBy (allows us to order our data based on a property : eg - cust in cusomters | orderBy: 'name')

AngularJS Controllers
- Define properties and emthods
- Handles showing/Hiding controls and  data in the view
- Handles events triggered by a view
- Knows how to retrieve data
- Interacts with the view using the $scope object

The role of $scope
- $scope is a keyword that AngularJS understands out the box
- $scope is "injected" into a controller
- Acts as athe ViewModel
- Views bind to scope properties and functions

Using "Controller AS"
- When using controll as, you need to reference it in the ng-controller in the template = "CustomerController as ctrl"
- The controller then would need to use "this" instead of $scope
- You can then access the items like this - cust in ctrl.customers inside of the template